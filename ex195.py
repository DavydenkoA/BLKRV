'''
Подвиг 2. Мы с вами в заданиях несколько раз генерировали последовательность чисел Фибоначчи, которая строится по
 правилу: каждое последующее число равно сумме двух предыдущих. Для разнообразия давайте будем генерировать каждое
 последующее как сумму трех предыдущих чисел. При этом первые три числа равны 1. Получаем такую последовательность:
1, 1, 1, 3, 5, 9, 17, 31, 57, ...
Не знаю, есть ли у нее название, поэтому, в рамках уроков, я скромно назову ее последовательностью Балакирева.
Итак, на вход программе поступает натуральное число N (N > 5), которое необходимо прочитать и сохранить в переменной.
Затем (или в начале программы), объявить функцию-генератор с сигнатурой:
def balak_seq(max_len): ...
которая бы возвращала max_len = N первых чисел последовательности Балакирева (включая первые три единицы).
Реализуйте эту функцию без использования коллекций (списков, кортежей, словарей и т.п.). Вызовите ее N раз для
получения N чисел и выведите полученные числа на экран в одну строчку через пробел.
Тесты: https://github.com/selfedu-rus/test-python-base/tree/main/9/9.2.2
Sample Input:
7
Sample Output:
1 1 1 3 5 9 17
'''

# ввод значения N
N = int(input())
# Определение функции-генератора get_sum с параметром N
def get_sum(N):
    # Инициализация первых трех чисел
    a = b = c = 1
    # Цикл для генерации N чисел последовательности Балакирева
    for _ in range(N):
        # Возвращает текущее значение числа
        yield a
        # Обновление значений первых трех чисел
        a, b, c = b, c, a + b + c
# Вывод на экран сгенерированных N чисел последовательности Балакирева
print(*get_sum(N))