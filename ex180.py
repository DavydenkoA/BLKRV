'''
Подвиг 4. Объявите функцию с именем get_list, одним параметром и следующим описанием в теле функции:



Сама функция должна формировать и возвращать список целых чисел, который передается ей на вход в виде строки из целых 
чисел, записанных через пробел.

Определите декоратор, который выполняет суммирование значений списка, возвращаемого декорируемой функцией и возвращает 
результат. Внутри декоратора декорируйте переданную функцию с помощью команды @wraps (не забудьте сделать 
импорт: from functools import wraps).

Такое декорирование необходимо, чтобы исходная функция get_list сохраняла свои локальные свойства: __name__ и __doc__.

Примените декоратор к функции get_list, но не вызывайте ее.
'''
from functools import wraps

# здесь продолжайте программу
def func_decor(func):
    @wraps(func)
    def wrapper(w):
        return sum(func(w))
    return wrapper


@func_decor
def get_list(s):
    '''Функция для формирования списка целых значений'''
    return list(map(int, s.split()))

s = '1 5 17 64'
print(get_list(s))